MODULE Points(goal_straight,goal_curved)
  VAR
    status : {straight,moving1,moving2,moving3,moving4,moving5,curved};
  ASSIGN
    init(status):=moving3;
    next(status):=case
        goal_straight & status=curved    : moving5;
        goal_straight & status=moving5   : moving4;
        goal_straight & status=moving4   : moving3;
	goal_straight & status=moving3   : moving2;
	goal_straight & status=moving2   : moving1;
        goal_straight & status=moving1   : straight;
        goal_curved & status=straight    : moving1;
        goal_curved & status=moving1     : moving2;
        goal_curved & status=moving2     : moving3;
        goal_curved & status=moving3     : moving4;
        goal_curved & status=moving4     : moving5;
        goal_curved & status=moving5     : curved;        
        TRUE                             : status;
    esac;
 
MODULE Train (
        S2A_red,S3A_red,S4A_red,
        S2B_red,S3B_red,S4B_red,
        S2A_green,S3A_green,S4A_green,
        S2B_green,S3B_green,S4B_green,
        S1A_red,S1A_green,S1B_red,S1B_green,
        P1A_locked_straight,P1A_locked_curved,
        P1B_locked_straight,P1B_locked_curved,
        P2A_locked_straight,P2A_locked_curved,
        P2B_locked_straight,P2B_locked_curved
  )
  VAR
    location : {T1A,T2A,T3A,T4A,T1B,T2B,T3B,T4B,T0A,T0B,T00};
    in_bound : boolean;
  ASSIGN
    init(in_bound) := TRUE;
    next(in_bound) := case
      location=T00 : TRUE;
      location=T3A : FALSE;
      location=T3B : FALSE;
      TRUE : in_bound;
    esac;
    init(location) := T00;
    next(location) := case
      location=T00 : { T00 , T0A , T0B };
      
      location=T0A & in_bound  : T1A;
      location=T0A & !in_bound : T00;
      location=T0B & in_bound  : T1B;
      location=T0B & !in_bound : T00;
      
      location=T1A & in_bound  & P1A_locked_straight & S2A_green : T2A;
      location=T1A & !in_bound & S1A_green : T0A;
      location=T1B & in_bound  & P1B_locked_straight & S2B_green : T2B;
      location=T1B & !in_bound & S1B_green : T0B;
      
      location=T2A & in_bound & P1A_locked_straight : T3A ;
      location=T2A & in_bound & P1A_locked_curved & P2B_locked_curved : T4B ;
      location=T2A & !in_bound & P1A_locked_straight & S1A_green: T1A;
      location=T2B & in_bound & P1B_locked_straight : T3B ;
      location=T2B & in_bound & P1B_locked_curved & P2A_locked_curved : T4A ;
      location=T2B & !in_bound & P1B_locked_straight : T1B;

      location=T4A & in_bound & P2A_locked_straight : T3A ;
      location=T4A & !in_bound & P2A_locked_curved & P1B_locked_curved  : T2B ;
      location=T4B & in_bound & P2B_locked_straight : T3B ;
      location=T4B & !in_bound & P2B_locked_curved & P1B_locked_curved  : T2A ;
      
      location=T3A & !in_bound & P2A_locked_straight & S4A_green : T4A;
      location=T3B & !in_bound & P2B_locked_straight & S4B_green : T4B;

      TRUE:location;
    esac;

MODULE Environment(
        S2A_red,S3A_red,S4A_red,
        S2B_red,S3B_red,S4B_red,
        S2A_green,S3A_green,S4A_green,
        S2B_green,S3B_green,S4B_green,
        P1A_goal_straight,P1A_goal_curved,
        P1B_goal_straight,P1B_goal_curved,
        P2A_goal_straight,P2A_goal_curved,
        P2B_goal_straight,P2B_goal_curved    
    )
    
  DEFINE
    T1A_occupied := train.location = T1A;
    T2A_occupied := train.location = T2A;
    T3A_occupied := train.location = T3A;
    T4A_occupied := train.location = T4A;
    T1B_occupied := train.location = T1B;
    T2B_occupied := train.location = T2B;
    T3B_occupied := train.location = T3B;
    T4B_occupied := train.location = T4B;
    S1A_red   := train.location = T0A; 
    S1B_red   := train.location = T0B;
    S1A_green := !S1A_red;
    S1B_green := !S1B_red;
    P1A_locked_straight := P1A.status=straight;
    P1B_locked_straight := P1B.status=straight;
    P2A_locked_straight := P2A.status=straight;
    P2B_locked_straight := P2B.status=straight;
    P1A_locked_curved := P1A.status=curved;
    P2A_locked_curved := P2A.status=curved;
    P1B_locked_curved := P1B.status=curved;
    P2B_locked_curved := P2B.status=curved;
    
  VAR
    P1A : Points(P1A_goal_straight,P1A_goal_curved);
    P1B : Points(P1B_goal_straight,P1B_goal_curved);
    P2A : Points(P2A_goal_straight,P2A_goal_curved);
    P2B : Points(P2B_goal_straight,P2B_goal_curved);
    train : Train(
        S2A_red,S3A_red,S4A_red,
        S2B_red,S3B_red,S4B_red,
        S2A_green,S3A_green,S4A_green,
        S2B_green,S3B_green,S4B_green,
        S1A_red,S1A_green,S1B_red,S1B_green,
        P1A_locked_straight,P1A_locked_curved,
        P1B_locked_straight,P1B_locked_curved,
        P2A_locked_straight,P2A_locked_curved,
        P2B_locked_straight,P2B_locked_curved
    );

MODULE Interlocking(
        T1A_occupied,T2A_occupied,T3A_occupied,T4A_occupied,
        T1B_occupied,T2B_occupied,T3B_occupied,T4B_occupied,
        S1A_red,S1A_green,S1B_red,S1B_green,
        P1A_locked_straight,P1A_locked_curved,
        P1B_locked_straight,P1B_locked_curved,
        P2A_locked_straight,P2A_locked_curved,
        P2B_locked_straight,P2B_locked_curved
    )
  DEFINE
    S2A_green := !S2A_red;
    S3A_green := !S3A_red;
    S4A_green := !S4A_red;
    S2B_green := !S2B_red;
    S3B_green := !S3B_red;
    S4B_green := !S4B_red;
  VAR
    S2A_red   : boolean;
    S3A_red   : boolean;
    S4A_red   : boolean;
    S2B_red   : boolean;
    S3B_red   : boolean;
    S4B_red   : boolean;
    P1A_goal_straight : boolean;
    P2A_goal_straight : boolean;
    P1B_goal_straight : boolean;
    P2B_goal_straight : boolean;
    P1A_goal_curved : boolean;
    P2A_goal_curved : boolean;
    P1B_goal_curved : boolean;
    P2B_goal_curved : boolean;
  ASSIGN
    init(S2A_red) := TRUE;
    init(S3A_red) := TRUE;
    init(S4A_red) := TRUE;
    init(S2B_red) := TRUE;
    init(S3B_red) := TRUE;
    init(S4B_red) := TRUE;
    init(P1A_goal_straight) := FALSE;
    init(P2A_goal_straight) := FALSE;
    init(P1B_goal_straight) := FALSE;
    init(P2B_goal_straight) := FALSE;
    init(P1A_goal_curved) := FALSE;
    init(P2A_goal_curved) := FALSE;
    init(P1B_goal_curved) := FALSE;
    init(P2B_goal_curved) := FALSE;
    
    next(S2A_red) := case
        P1A_locked_straight & !T2A_occupied & !T3A_occupied : FALSE;
        TRUE : TRUE;
    esac;
    next(S3A_red) := case
        P1A_locked_straight & !T2A_occupied & !T1A_occupied : FALSE;
        TRUE : TRUE;
    esac;
    next(S4A_red) := case
        P2A_locked_curved & !T4A_occupied & ! T2B_occupied & ! T1B_occupied : FALSE;
        TRUE : TRUE;
    esac;
    next(S2B_red) := case
        P1B_locked_straight & !T2B_occupied & !T3B_occupied : FALSE;
        TRUE : TRUE;
    esac;
    next(S3B_red) := case
        P1B_locked_straight & !T2B_occupied & !T1B_occupied : FALSE;
        TRUE : TRUE;
    esac;
    next(S4B_red) := case
        P2B_locked_curved & !T4B_occupied & ! T2A_occupied & ! T1A_occupied : FALSE;
        TRUE : TRUE;
    esac;

    next(P1A_goal_straight) := case
      P1A_locked_straight : FALSE;
      T1A_occupied : TRUE;
      TRUE : P1A_goal_straight;
    esac;
    next(P2A_goal_straight) := case
      P2A_locked_straight : FALSE;
      T1B_occupied : TRUE;
      TRUE : P2A_goal_straight;
    esac;
    next(P1B_goal_straight) := case
      P1B_locked_straight : FALSE;
      T1B_occupied : TRUE;
      TRUE : P1B_goal_straight;
    esac;
    next(P2B_goal_straight) := case
      P2B_locked_straight : FALSE;
      T1A_occupied : TRUE;
      TRUE : P2B_goal_straight;
    esac;
    next(P1A_goal_curved) := case
      P1A_locked_curved : FALSE;
      T3B_occupied : TRUE;
      TRUE : P1A_goal_curved;
    esac;
    next(P2A_goal_curved) := case
      P2A_locked_curved : FALSE;
      T3A_occupied : TRUE;
      TRUE : P2A_goal_curved;
    esac;
    next(P1B_goal_curved) := case
      P1B_locked_curved : FALSE;
      T3A_occupied : TRUE;
      TRUE : P1B_goal_curved;
    esac;
    next(P2B_goal_curved) := case
      P2B_locked_curved : FALSE;
      T3B_occupied : TRUE;
      TRUE : P2B_goal_curved;
    esac;
 
MODULE main
  DEFINE
    T1A_occupied := environment.T1A_occupied;
    T2A_occupied := environment.T2A_occupied;
    T3A_occupied := environment.T3A_occupied;
    T4A_occupied := environment.T4A_occupied;
    T1B_occupied := environment.T1B_occupied;
    T2B_occupied := environment.T2B_occupied;
    T3B_occupied := environment.T3B_occupied;
    T4B_occupied := environment.T4B_occupied;
    S1A_red   := environment.S1A_red;
    S1B_red   := environment.S1B_red;
    S1A_green := environment.S1A_green;
    S1B_green := environment.S1B_green;
    P1A_locked_straight := environment.P1A_locked_straight;
    P2A_locked_straight := environment.P2A_locked_straight;
    P1B_locked_straight := environment.P1B_locked_straight;
    P2B_locked_straight := environment.P2B_locked_straight;
    P1A_locked_curved := environment.P1A_locked_curved;
    P2A_locked_curved := environment.P2A_locked_curved;
    P1B_locked_curved := environment.P1B_locked_curved;
    P2B_locked_curved := environment.P2B_locked_curved;

    S2A_red   := interlocking.S2A_red;
    S3A_red   := interlocking.S3A_red;
    S4A_red   := interlocking.S4A_red;
    S2B_red   := interlocking.S2B_red;
    S3B_red   := interlocking.S3B_red;
    S4B_red   := interlocking.S4B_red;
    S2A_green := interlocking.S2A_green;
    S3A_green := interlocking.S3A_green;
    S4A_green := interlocking.S4A_green;
    S2B_green := interlocking.S2B_green;
    S3B_green := interlocking.S3B_green;
    S4B_green := interlocking.S4B_green;
    P1A_goal_straight := interlocking.P1A_goal_straight;
    P2A_goal_straight := interlocking.P2A_goal_straight;
    P1B_goal_straight := interlocking.P1B_goal_straight;
    P2B_goal_straight := interlocking.P2B_goal_straight;
    P1A_goal_curved := interlocking.P1A_goal_curved;
    P2A_goal_curved := interlocking.P2A_goal_curved;
    P1B_goal_curved := interlocking.P1B_goal_curved;
    P2B_goal_curved := interlocking.P2B_goal_curved;
  VAR
    environment  : Environment(
        S2A_red,S3A_red,S4A_red,
        S2B_red,S3B_red,S4B_red,
        S2A_green,S3A_green,S4A_green,
        S2B_green,S3B_green,S4B_green,
        P1A_goal_straight,P1A_goal_curved,
        P1B_goal_straight,P1B_goal_curved,
        P2A_goal_straight,P2A_goal_curved,
        P2B_goal_straight,P2B_goal_curved     
    );
    interlocking : Interlocking(
        next(T1A_occupied),next(T2A_occupied),next(T3A_occupied),next(T4A_occupied),
        next(T1B_occupied),next(T2B_occupied),next(T3B_occupied),next(T4B_occupied),
        next(S1A_red),next(S1A_green),next(S1B_red),next(S1B_green),
        next(P1A_locked_straight),next(P1A_locked_curved),
        next(P1B_locked_straight),next(P1B_locked_curved),
        next(P2A_locked_straight),next(P2A_locked_curved),
        next(P2B_locked_straight),next(P2B_locked_curved)
    );

--1) The signal shows either green or red. |liveness|
CTLSPEC EG(S1A_green|S1A_red) & EG(S2A_green|S2A_red) & EG(S3A_green|S3A_red) & EG(S4A_green|S4A_red) & EG(S1B_green|S1B_red) & EG(S2B_green|S2B_red) & EG(S3B_green|S3B_red) & EG(S4B_green|S4B_red)

--2) The signal shows red if passing the signal is unsafe due to occupied tracks or points that are not locked. |Safety|
CTLSPEC AG ((T1A_occupied & T3B_occupied & P1A_locked_curved & P2B_locked_curved)-> AF S1A_red) &
AG ((T1B_occupied & T3A_occupied & P2A_locked_curved & P1B_locked_curved)-> AF S1B_red) 

--3) The signal is not stuck on red forever. |liveness|
CTLSPEC !(AG S1A_red) & !(AG S2A_red) & !(AG S3A_red) & !(AG S4A_red) & !(AG S1B_red) & !(AG S2B_red) & !(AG S3B_red) & !(AG S4B_red)

--4) The system never issues conflicting commands. |liveness|
CTLSPEC  AG!(S1A_red & S1A_green) & AG!(S2A_red & S2A_green) & AG!(S3A_red & S3A_green) &
AG!(S4A_red & S4A_green) & AG!(S1B_red & S1B_green) & AG!(S2B_red & S2B_green) &
AG!(S3B_red & S3B_green) & AG!(S4B_red & S4B_green) & AG!(P1A_goal_straight & P1A_goal_curved) &
AG!(P2A_goal_straight & P2A_goal_curved) & AG!(P1B_goal_straight & P1B_goal_curved) &
AG!(P2B_goal_straight & P2B_goal_curved) & AG!(P1A_locked_straight & P1A_locked_curved) &
AG!(P2A_locked_straight & P2A_locked_curved) &AG!(P1B_locked_straight & P1B_locked_curved) &
AG!(P2B_locked_straight & P2B_locked_curved)

--5) The points always follow the given commands. |liveness|
CTLSPEC AG (P1A_goal_curved -> AF P1A_locked_curved) & AG (P2A_goal_curved -> AF P2A_locked_curved) &
AG (P1B_goal_curved -> AF P1B_locked_curved) & AG (P2B_goal_curved -> AF P2B_locked_curved) &
AG (P1A_goal_straight -> AF P1A_locked_straight) & AG (P2A_goal_straight -> AF P2A_locked_straight) & 
AG (P1B_goal_straight -> AF P1B_locked_straight) & AG (P2B_goal_straight -> AF P2B_locked_straight)

--6)Trains always make progress. |liveness| 
CTLSPEC !(AG T1A_occupied) & !(AG T2A_occupied) & !(AG T3A_occupied) & !(AG T4A_occupied) & !(AG T1B_occupied) &
!(AG T2B_occupied) & !(AG T3B_occupied) & !(AG T4B_occupied)

--7)There is a trace in which track T3A is occupied. |liveness|
CTLSPEC EF T3A_occupied

--8)There is a trace in which trains pass each other in the middle. |liveness|
CTLSPEC EF (T3A_occupied & T3B_occupied)

--9)Сorresponding points must always be adjacent to each other. |Safety|
CTLSPEC  AG (P1A_locked_curved -> AF P2B_locked_curved) & AG (P2A_locked_curved -> AF P1B_locked_curved) &
AG (P2B_locked_curved -> AF P1A_locked_curved) & AG (P1B_locked_curved -> AF P2A_locked_curved) 

--10)Corresponding points must remain in curved positions if a train passes through them. |Safety|
CTLSPEC  AG ((P1A_locked_curved & P2B_locked_curved) -> AF S1A_green)
